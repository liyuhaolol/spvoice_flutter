plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}



def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

android {
    namespace "com.github.spvoice_flutter"
    compileSdkVersion androids.compileSdkVersion
    //ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.github.spvoice_flutter"
        minSdkVersion 30
        targetSdkVersion androids.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    buildTypes {
        release {
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug

            ndk {
                //noinspection ChromeOsAbiSupport
                abiFilters 'arm64-v8a','x86_64'
            }
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "androidx.appcompat:appcompat:${libs.appcompact}"
    implementation "com.google.android.material:material:${libs.design}"
    //通用的工具类
    implementation "io.github.liyuhaolol:CommonUtils:${libs.lib_utils}"
    //token
    implementation files('libs/TokenUtil2.jar')
    //fastjson
    implementation "com.alibaba.fastjson2:fastjson2:${libs.fastjson}"
}
